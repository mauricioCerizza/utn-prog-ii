"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[6158],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,l[1]=u;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6659:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),l=["components"],u={sidebar_label:"Enumerados",slug:"/clases/encapsulamiento/apuntes/enumerados",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null},i=void 0,s={unversionedId:"clases/encapsulamiento/Apuntes/enumerados",id:"clases/encapsulamiento/Apuntes/enumerados",isDocsHomePage:!1,title:"enumerados",description:"Enumerados",source:"@site/docs/clases/07-encapsulamiento/Apuntes/03-enumerados.md",sourceDirName:"clases/07-encapsulamiento/Apuntes",slug:"/clases/encapsulamiento/apuntes/enumerados",permalink:"/utn-prog-ii/docs/clases/encapsulamiento/apuntes/enumerados",version:"current",lastUpdatedBy:"unknown",lastUpdatedAt:1629424106,formattedLastUpdatedAt:"8/19/2021",sidebarPosition:3,frontMatter:{sidebar_label:"Enumerados",slug:"/clases/encapsulamiento/apuntes/enumerados",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null}},c=[{value:"Enumerados",id:"enumerados",children:[]}],p={toc:c};function m(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"enumerados"},"Enumerados"),(0,a.kt)("p",null,"Un enumerado es un ",(0,a.kt)("code",null,"value type")," definido por un conjunto de constantes con nombre."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public enum Color\n{\n    Rojo,\n    Verde,\n    Azul\n}\n")),(0,a.kt)("p",null,"De forma predeterminada, los valores miembros del enumerado estan asociados con un numero del tipo ",(0,a.kt)("code",null,"int"),". Comienzan con cero y aumentan en uno en el orden que fueron definidos.  Es posible especificar expl\xedcitamente los valores de asociados, como se muestra en el ejemplo siguiente:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public enum Color\n{\n    Rojo,\n    Verde = 100,\n    Azul \n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Al miembro del enumerado ",(0,a.kt)("code",null,"Rojo")," se le asigna autom\xe1ticamente el valor cero (ya que no tiene inicializador y es el primer miembro de la enumeraci\xf3n)"),(0,a.kt)("li",{parentName:"ul"},"El miembro del enumerado ",(0,a.kt)("code",null,"Verde")," recibe expl\xedcitamente el valor 100."),(0,a.kt)("li",{parentName:"ul"},"Al miembro del enumerado ",(0,a.kt)("code",null,"Blue")," se le asigna autom\xe1ticamente el valor m\xe1s uno del miembro que lo precede textualmente.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"class Program\n{\n   static void Main()\n   {\n        Console.WriteLine(Color.Rojo);\n        Console.WriteLine((Color)100);\n        Console.WriteLine((int)Color.Azul);\n   }\n}\n// El ejemplo muestra la siguiente salida:\n//    Rojo\n//    Verde\n//    101\n")))}m.isMDXComponent=!0}}]);