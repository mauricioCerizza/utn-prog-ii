"use strict";(self.webpackChunkutn_prog_ii=self.webpackChunkutn_prog_ii||[]).push([[8028],{3905:function(e,r,a){a.d(r,{Zo:function(){return p},kt:function(){return b}});var o=a(7294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function s(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,o)}return a}function t(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?s(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function c(e,r){if(null==e)return{};var a,o,n=function(e,r){if(null==e)return{};var a,o,n={},s=Object.keys(e);for(o=0;o<s.length;o++)a=s[o],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)a=s[o],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=o.createContext({}),l=function(e){var r=o.useContext(i),a=r;return e&&(a="function"==typeof e?e(r):t(t({},r),e)),a},p=function(e){var r=l(e.components);return o.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},u=o.forwardRef((function(e,r){var a=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(a),b=n,g=u["".concat(i,".").concat(b)]||u[b]||d[b]||s;return a?o.createElement(g,t(t({ref:r},p),{},{components:a})):o.createElement(g,t({ref:r},p))}));function b(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var s=a.length,t=new Array(s);t[0]=u;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,t[1]=c;for(var l=2;l<s;l++)t[l]=a[l];return o.createElement.apply(null,t)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},874:function(e,r,a){a.r(r),a.d(r,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var o=a(7462),n=a(3366),s=(a(7294),a(3905)),t=["components"],c={sidebar_label:"Sobrecarga de Operadores",slug:"/clases/sobrecarga/apuntes/sobrecarga-operadores",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null},i=void 0,l={unversionedId:"clases/sobrecarga/Apuntes/sobrecarga-operadores",id:"clases/sobrecarga/Apuntes/sobrecarga-operadores",isDocsHomePage:!1,title:"sobrecarga-operadores",description:"Sobrecarga de Operadores",source:"@site/docs/clases/04-sobrecarga/Apuntes/03-sobrecarga-operadores.md",sourceDirName:"clases/04-sobrecarga/Apuntes",slug:"/clases/sobrecarga/apuntes/sobrecarga-operadores",permalink:"/utn-prog-ii/docs/clases/sobrecarga/apuntes/sobrecarga-operadores",version:"current",lastUpdatedBy:"unknown",lastUpdatedAt:1629066452,formattedLastUpdatedAt:"8/15/2021",sidebarPosition:3,frontMatter:{sidebar_label:"Sobrecarga de Operadores",slug:"/clases/sobrecarga/apuntes/sobrecarga-operadores",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null},sidebar:"Clases",previous:{title:"Sobrecarga de Constructores",permalink:"/utn-prog-ii/docs/clases/sobrecarga/apuntes/sobrecarga-constructores"},next:{title:"Sobrecarga de Operadores de Conversi\xf3n",permalink:"/utn-prog-ii/docs/clases/sobrecarga/apuntes/sobrecarga-operador-conversion"}},p=[{value:"Sobrecarga de Operadores",id:"sobrecarga-de-operadores",children:[{value:"Los operadores unarios sobrecargables son:",id:"los-operadores-unarios-sobrecargables-son",children:[]},{value:"Los operadores binarios sobrecargables son:",id:"los-operadores-binarios-sobrecargables-son",children:[]},{value:"No es posible sobrecargar los operadores:",id:"no-es-posible-sobrecargar-los-operadores",children:[]}]}],d={toc:p};function u(e){var r=e.components,a=(0,n.Z)(e,t);return(0,s.kt)("wrapper",(0,o.Z)({},d,a,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"sobrecarga-de-operadores"},"Sobrecarga de Operadores"),(0,s.kt)("p",null,"Una clase puede proporcionar la implementaci\xf3n personalizada de una operaci\xf3n en caso de que uno o ambos operandos sean del tipo de la clase.  Por tanto, no es posible que un operador definido por el usuario tenga la misma firma que un operador predefinido."),(0,s.kt)("h3",{id:"los-operadores-unarios-sobrecargables-son"},"Los operadores unarios sobrecargables son:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"+   -   !   ~   ++   --   true   false \n")),(0,s.kt)("h3",{id:"los-operadores-binarios-sobrecargables-son"},"Los operadores binarios sobrecargables son:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"+   -   *   /   %   &   |   ^   <<   >>   ==   !=   >   <   >=   <=\n")),(0,s.kt)("p",null,"Por ejemplo:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Cuadrado\n{\n    int lado;\n\n    public static bool operator == (Cuadrado c1, Cuadrado c2){\n    \n        return c1.lado == c2.lado;\n    }\n\n    public static bool operator != (Cuadrado c1, Cuadrado c2){\n    \n        return !(c1 == c2);\n    }\n}\n")),(0,s.kt)("p",null,"Los operadores de comparaci\xf3n deben sobrecargarse en pares. Es decir, si alguno de los operadores de un par est\xe1 sobrecargado, el otro operador tambi\xe9n debe estar sobrecargado. == y != , < y > , <= y  >="),(0,s.kt)("p",null,"Cuando un operador binario est\xe1 sobrecargado, el operador de asignaci\xf3n correspondiente, si lo hay, tambi\xe9n est\xe1 sobrecargado impl\xedcitamente. Por ejemplo, una sobrecarga de operador ",(0,s.kt)("em",{parentName:"p"}," tambi\xe9n es una sobrecarga de operador "),"=. El operador de asignaci\xf3n (=) no se puede sobrecargar. Una asignaci\xf3n siempre realiza una simple copia bit a bit de un valor en una variable."),(0,s.kt)("h3",{id:"no-es-posible-sobrecargar-los-operadores"},"No es posible sobrecargar los operadores:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"=, &&, ||, ??, ?:, =>, checked, unchecked, new, typeof, default, as, is\n")))}u.isMDXComponent=!0}}]);